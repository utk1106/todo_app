stages:
  - build
  - test
  - deploy

variables:
  ECR_REGISTRY: "721607229558.dkr.ecr.ap-south-1.amazonaws.com"
  ECR_REPOSITORY: "todo-app"
  IMAGE_TAG: "$CI_COMMIT_SHA"

build_job:
  stage: build
  image: docker:20.10
  services:
    - docker:dind
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip install awscli
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region ap-south-1
  script:
    - docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
    - docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
    - docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

test_job:
  stage: test
  image: docker:20.10
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375
  before_script:
    - apt-get update
    - apt-get install -y docker.io
    - apt-get install -y python3-pip
    - pip3 install awscli requests --upgrade
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region ap-south-1
    - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
    - docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - docker run -d --name test-app -p 8000:8000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    - sleep 10  # Increased to ensure app starts
  script:
    - docker cp validate_auth.py test-app:/app/validate_auth.py
    - docker exec test-app python /app/validate_auth.py
    - docker exec test-app /bin/bash -c "pip install -r requirements.txt && python manage.py test"
  after_script:
    - docker stop test-app
    - docker rm test-app

deploy_test:
  stage: deploy
  image: alpine:latest
  when: manual
  before_script:
    - apk add --no-cache openssh-client bash curl
    - mkdir -p ~/.ssh
    - echo "$TEST_EC2_SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $TEST_EC2_HOST >> ~/.ssh/known_hosts
  script:
    - |
      ssh -o StrictHostKeyChecking=no $TEST_EC2_USERNAME@$TEST_EC2_HOST "
        aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_REGISTRY &&
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG &&
        docker stop todo-app-test || true &&
        docker rm todo-app-test || true &&
        docker run -d --name todo-app-test -p 8080:8000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG &&
        echo 'Waiting for application to start...' &&
        sleep 15 &&
        RESPONSE=\$(curl -s localhost:8080/api/tasks/) &&
        echo \"Response from API: \$RESPONSE\" &&
        if echo \"\$RESPONSE\" | grep -q \"Authentication credentials were not provided\"; then
          echo 'API is up and running properly (requires authentication)' &&
          echo 'Deployment completed successfully'
        else
          echo 'Unexpected response from API' &&
          exit 1
        fi
      "


deploy_main:
  stage: deploy
  image: alpine:latest
  when: manual
  before_script:
    - apk add --no-cache openssh-client bash curl
    - mkdir -p ~/.ssh
    - echo "$MAIN_EC2_SSH_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $MAIN_EC2_HOST >> ~/.ssh/known_hosts
  script:
    - ssh -o StrictHostKeyChecking=no $MAIN_EC2_USERNAME@$MAIN_EC2_HOST "
        aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin $ECR_REGISTRY &&
        docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG &&
        docker stop todo-app || true &&
        docker rm todo-app || true &&
        docker run -d --name todo-app -p 80:8000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG &&
        sleep 5 &&
        curl -f http://localhost:80/api/tasks/ || exit 1"