version: '3'
# docker compose yml files ties everything together
#Starts web (Django app), nginx (web server), and cron (scheduler).
#Maps ports (80 for Nginx, 8000 internal for web).
#Links volumes for static files.
services:
  web:
    build: .
    command: gunicorn todo_list.wsgi:application --bind 0.0.0.0:8000
    volumes:
      - .:/app
      - static_data:/app/staticfiles
    environment:
      - DEBUG=0
    expose:
      - "8000"  # Internal port for Nginx
# web: Runs the Django app with Gunicorn on port 8000.
#   build: .: Builds the image using the Dockerfile in the current directory.
#   command: gunicorn todo_list.wsgi:application --bind 0.0.0.0:8000: Starts Gunicorn to serve the app.
#   volumes: Shares code and static files between host and container.
#   environment: Sets DEBUG=0 for production mode.
#   expose: "8000": Opens port 8000 internally for Nginx.
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - static_data:/usr/share/nginx/html/static
    depends_on:
      - web
#   volumes: Links Nginx config and static files to the container.
#   depends_on: - web: Ensures the web service starts first.
  cron:
    build: .
    command: cron -f
    volumes:
      - .:/app

volumes:
  static_data:
  
# cron: Runs scheduled tasks in the background.
#   build: .: Uses the same Dockerfile as the web service.
#   command: cron -f: Starts the cron daemon in foreground mode.
#   volumes: Shares code with the container.
# volumes: static_data: Creates a shared storage for static files across services.

# services:
#   web:
#     build: .
#     command: python manage.py runserver 0.0.0.0:8000
#     volumes:
#       - .:/app
#     ports:
#       - "8000:8000"
#     environment:
#       - DEBUG=1
#   cron:
#     build: .
#     command: cron -f  # -f keeps cron in foreground
#     volumes:
#       - .:/app